@page "/tabletest"

<h3>TableTest</h3>

<button class="btn btn-info" @onclick="Generate">Generate</button>
<div class="progress">
    <div class="progress-bar" role="progressbar" style="width: @(Decimal.ToInt32(progressPercent * 100))%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">Chargement @string.Format("{0:P0}", progressPercent)</div>
</div>
@(progressPercent*100)%
@Count
<br/>

@if (progressPercent*100 == 100)
{

    <Table T="Outillage" CollectionT="Outillages" @ref="TableOutillage">
        <Header>
            <HeaderValue Value="Id" SortBy="@(nameof(Outillage.Libelle))" OnSort="TableOutillage.Sort"/>
            <HeaderValue Value="Nb" SortBy="@(nameof(Outillage.Nb))" OnSort="TableOutillage.Sort"/>
        </Header>
        <Row>
            <RowValue Value="@context.Libelle"/>
            <RowValue Value="@context.Nb"/>
        </Row>
    </Table>

}



@code {

    private decimal progressPercent { get; set; }
    private int Count { get; set; }

    public Table<Outillage> TableOutillage { get; set; }

    private List<Outillage> Outillages { get; set; } = new List<Outillage>(); 
    private static readonly Random Random = new();

    private static string RandomString(int length)
    {
        const string chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        return new string(Enumerable.Repeat(chars, length)
            .Select(s => s[Random.Next(s.Length)]).ToArray());
    }



    private async Task Generate()
    {
        progressPercent = 0; 
        Outillages = new List<Outillage>();
        var nb = 1000; 

        for (var i = 0; i < nb; i++)
        {
            await Task.Delay(1);

            Outillages.Add(new Outillage
            {
                Libelle = RandomString(10),
                Nb = new Random().Next(0, 11)
            });

            progressPercent = Decimal.Divide(i+1, nb);

            if (progressPercent * 100 == 50)
            {
                var truc = ""; 
            }
            Count = Outillages.Count; 

            await InvokeAsync(StateHasChanged); 
        }

    }


}
